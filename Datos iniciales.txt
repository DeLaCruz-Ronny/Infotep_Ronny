Clientes
--Crud
-nombre
-direccion
-telefono
-correo

Servicios
--Crud
-Lavado
-Secado
-Planchado
-Precio

Lavadoras
--Crud
nombre lavadoras

*Inventario

Pedidos
--Crud
Cliente referencia a tabla clientes
Servicio referencia a la tabla de servicios
Cantidad de prendas
Precio total

Usuarios
-Roles y permisos
-Administrador, cajero, lavador

---------------------------------------------------------------
CONEXION
Scaffold-DbContext "Server=.;Database=();Integrated Security=True;TrustServerCertificate=True" Microsoft.EntityFrameworkCore.MySqlServer -O Models
---------------------------------------------------------------

------------------------------------------------------------------------------------------------
CDN datatable
<link rel="stylesheet" href="https://cdn.datatables.net/2.0.5/css/dataTables.dataTables.css" />
<script src="https://cdn.datatables.net/2.0.5/js/dataTables.js"></script>

$(document).ready( function () {
    $('#myTable').DataTable();
} );
------------------------------------------------------------------------------------------------


namespace Afectivo_p.Controllers
{
    public class InicioController : Controller
    {
        
        private readonly IUsuarioService _UsuarioService;

        public InicioController(IUsuarioService usuarioService)
        {
            _UsuarioService = usuarioService;
        }

        public IActionResult Registrarse()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Registrarse(Usuario modelo)
        {
            modelo.Clave = Utilidades.EncriptarClave(modelo.Clave);

            Usuario usuario_creado = await _UsuarioService.Saveusuario(modelo);

            if (usuario_creado.IdUsuario > 0)
            {
                return RedirectToAction("IniciarSesion", "Inicio");
            }
            else
            {
                ViewData["mensaje"] = "No se pudo crear el usuario";
                return View();
            }
        }

        public IActionResult IniciarSesion()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> IniciarSesion(string usuario, string clave)
        {
            Usuario usuario_encontrado = await _UsuarioService.GetUsuarios(usuario, Utilidades.EncriptarClave(clave));

            if (usuario_encontrado == null)
            {
                ViewData["mensaje"] = "No se encontraron concidencias";
                return View();
            }

            List<Claim> claims = new List<Claim>()
            {
                new Claim(ClaimTypes.Name,usuario_encontrado.Nombre)
            };

            foreach (var item in usuario_encontrado.IdRol.ToString())
            {
                claims.Add(new Claim(ClaimTypes.Role, item.ToString()));
            }

            ClaimsIdentity claimsIdentity = new ClaimsIdentity(claims,CookieAuthenticationDefaults.AuthenticationScheme);

            AuthenticationProperties authProperties = new AuthenticationProperties()
            {
                AllowRefresh = true,
            };

            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity), authProperties);

            return RedirectToAction("Index", "Home");
        }


    }
}